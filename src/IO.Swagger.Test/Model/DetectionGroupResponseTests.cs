/* 
 * BludeltaWebServiceAPI Hosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */


using NUnit.Framework;

namespace IO.Swagger.Test
{
  /// <summary>
  ///   Class for testing DetectionGroupResponse
  /// </summary>
  /// <remarks>
  ///   This file is automatically generated by Swagger Codegen.
  ///   Please update the test case below to test the model.
  /// </remarks>
  [TestFixture]
  public class DetectionGroupResponseTests
  {
    // TODO uncomment below to declare an instance variable for DetectionGroupResponse
    //private DetectionGroupResponse instance;

    /// <summary>
    ///   Setup before each test
    /// </summary>
    [SetUp]
    public void Init()
    {
      // TODO uncomment below to create an instance of DetectionGroupResponse
      //instance = new DetectionGroupResponse();
    }

    /// <summary>
    ///   Clean up after each test
    /// </summary>
    [TearDown]
    public void Cleanup()
    {
    }

    /// <summary>
    ///   Test an instance of DetectionGroupResponse
    /// </summary>
    [Test]
    public void DetectionGroupResponseInstanceTest()
    {
      // TODO uncomment below to test "IsInstanceOfType" DetectionGroupResponse
      //Assert.IsInstanceOfType<DetectionGroupResponse> (instance, "variable 'instance' is a DetectionGroupResponse");
    }

    /// <summary>
    ///   Test the property 'InvoiceDetailTypePredictions'
    /// </summary>
    [Test]
    public void InvoiceDetailTypePredictionsTest()
    {
      // TODO unit test for the property 'InvoiceDetailTypePredictions'
    }

    /// <summary>
    ///   Test the property 'TypeName'
    /// </summary>
    [Test]
    public void TypeNameTest()
    {
      // TODO unit test for the property 'TypeName'
    }

    /// <summary>
    ///   Test the property 'Type'
    /// </summary>
    [Test]
    public void TypeTest()
    {
      // TODO unit test for the property 'Type'
    }
  }
}