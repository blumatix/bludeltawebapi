/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// ContactResponse
    /// </summary>
    [DataContract]
    public partial class ContactResponse :  IEquatable<ContactResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="ContactResponse" /> class.
        /// </summary>
        /// <param name="Name">Name of the contact.</param>
        /// <param name="Address">Address of the contact.</param>
        /// <param name="WebsiteUrl">Website of the contact.</param>
        /// <param name="Email">Email address of the contact.</param>
        /// <param name="Phone">Phone number of the contact.</param>
        /// <param name="Fax">Fax number of the contact.</param>
        public ContactResponse(DetailResponse Name = default(DetailResponse), AddressResponse Address = default(AddressResponse), Object WebsiteUrl = default(Object), Object Email = default(Object), DetailResponse Phone = default(DetailResponse), DetailResponse Fax = default(DetailResponse))
        {
            this.Name = Name;
            this.Address = Address;
            this.WebsiteUrl = WebsiteUrl;
            this.Email = Email;
            this.Phone = Phone;
            this.Fax = Fax;
        }
        
        /// <summary>
        /// Name of the contact
        /// </summary>
        /// <value>Name of the contact</value>
        [DataMember(Name="Name", EmitDefaultValue=false)]
        public DetailResponse Name { get; set; }

        /// <summary>
        /// Address of the contact
        /// </summary>
        /// <value>Address of the contact</value>
        [DataMember(Name="Address", EmitDefaultValue=false)]
        public AddressResponse Address { get; set; }

        /// <summary>
        /// Website of the contact
        /// </summary>
        /// <value>Website of the contact</value>
        [DataMember(Name="WebsiteUrl", EmitDefaultValue=false)]
        public Object WebsiteUrl { get; set; }

        /// <summary>
        /// Email address of the contact
        /// </summary>
        /// <value>Email address of the contact</value>
        [DataMember(Name="Email", EmitDefaultValue=false)]
        public Object Email { get; set; }

        /// <summary>
        /// Phone number of the contact
        /// </summary>
        /// <value>Phone number of the contact</value>
        [DataMember(Name="Phone", EmitDefaultValue=false)]
        public DetailResponse Phone { get; set; }

        /// <summary>
        /// Fax number of the contact
        /// </summary>
        /// <value>Fax number of the contact</value>
        [DataMember(Name="Fax", EmitDefaultValue=false)]
        public DetailResponse Fax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ContactResponse {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Address: ").Append(Address).Append("\n");
            sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
            sb.Append("  Email: ").Append(Email).Append("\n");
            sb.Append("  Phone: ").Append(Phone).Append("\n");
            sb.Append("  Fax: ").Append(Fax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as ContactResponse);
        }

        /// <summary>
        /// Returns true if ContactResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of ContactResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(ContactResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.Name == other.Name ||
                    this.Name != null &&
                    this.Name.Equals(other.Name)
                ) && 
                (
                    this.Address == other.Address ||
                    this.Address != null &&
                    this.Address.Equals(other.Address)
                ) && 
                (
                    this.WebsiteUrl == other.WebsiteUrl ||
                    this.WebsiteUrl != null &&
                    this.WebsiteUrl.Equals(other.WebsiteUrl)
                ) && 
                (
                    this.Email == other.Email ||
                    this.Email != null &&
                    this.Email.Equals(other.Email)
                ) && 
                (
                    this.Phone == other.Phone ||
                    this.Phone != null &&
                    this.Phone.Equals(other.Phone)
                ) && 
                (
                    this.Fax == other.Fax ||
                    this.Fax != null &&
                    this.Fax.Equals(other.Fax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.Name != null)
                    hash = hash * 59 + this.Name.GetHashCode();
                if (this.Address != null)
                    hash = hash * 59 + this.Address.GetHashCode();
                if (this.WebsiteUrl != null)
                    hash = hash * 59 + this.WebsiteUrl.GetHashCode();
                if (this.Email != null)
                    hash = hash * 59 + this.Email.GetHashCode();
                if (this.Phone != null)
                    hash = hash * 59 + this.Phone.GetHashCode();
                if (this.Fax != null)
                    hash = hash * 59 + this.Fax.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
