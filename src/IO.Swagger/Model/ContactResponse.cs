/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace IO.Swagger.Model
{
  /// <summary>
  ///   ContactResponse
  /// </summary>
  [DataContract]
  public class ContactResponse : IEquatable<ContactResponse>, IValidatableObject
  {
    /// <summary>
    ///   Initializes a new instance of the <see cref="ContactResponse" /> class.
    /// </summary>
    /// <param name="Name">Name of the contact.</param>
    /// <param name="Address">Address of the contact.</param>
    /// <param name="WebsiteUrl">Website of the contact.</param>
    /// <param name="Email">Email address of the contact.</param>
    /// <param name="Phone">Phone number of the contact.</param>
    /// <param name="Fax">Fax number of the contact.</param>
    public ContactResponse(DetailResponse Name = default(DetailResponse),
      AddressResponse Address = default(AddressResponse), object WebsiteUrl = default(object),
      object Email = default(object), DetailResponse Phone = default(DetailResponse),
      DetailResponse Fax = default(DetailResponse))
    {
      this.Name = Name;
      this.Address = Address;
      this.WebsiteUrl = WebsiteUrl;
      this.Email = Email;
      this.Phone = Phone;
      this.Fax = Fax;
    }

    /// <summary>
    ///   Name of the contact
    /// </summary>
    /// <value>Name of the contact</value>
    [DataMember(Name = "Name", EmitDefaultValue = false)]
    public DetailResponse Name { get; set; }

    /// <summary>
    ///   Address of the contact
    /// </summary>
    /// <value>Address of the contact</value>
    [DataMember(Name = "Address", EmitDefaultValue = false)]
    public AddressResponse Address { get; set; }

    /// <summary>
    ///   Website of the contact
    /// </summary>
    /// <value>Website of the contact</value>
    [DataMember(Name = "WebsiteUrl", EmitDefaultValue = false)]
    public object WebsiteUrl { get; set; }

    /// <summary>
    ///   Email address of the contact
    /// </summary>
    /// <value>Email address of the contact</value>
    [DataMember(Name = "Email", EmitDefaultValue = false)]
    public object Email { get; set; }

    /// <summary>
    ///   Phone number of the contact
    /// </summary>
    /// <value>Phone number of the contact</value>
    [DataMember(Name = "Phone", EmitDefaultValue = false)]
    public DetailResponse Phone { get; set; }

    /// <summary>
    ///   Fax number of the contact
    /// </summary>
    /// <value>Fax number of the contact</value>
    [DataMember(Name = "Fax", EmitDefaultValue = false)]
    public DetailResponse Fax { get; set; }

    /// <summary>
    ///   Returns true if ContactResponse instances are equal
    /// </summary>
    /// <param name="other">Instance of ContactResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ContactResponse other)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      if (other == null)
        return false;

      return
        (
          Name == other.Name ||
          Name != null &&
          Name.Equals(other.Name)
        ) &&
        (
          Address == other.Address ||
          Address != null &&
          Address.Equals(other.Address)
        ) &&
        (
          WebsiteUrl == other.WebsiteUrl ||
          WebsiteUrl != null &&
          WebsiteUrl.Equals(other.WebsiteUrl)
        ) &&
        (
          Email == other.Email ||
          Email != null &&
          Email.Equals(other.Email)
        ) &&
        (
          Phone == other.Phone ||
          Phone != null &&
          Phone.Equals(other.Phone)
        ) &&
        (
          Fax == other.Fax ||
          Fax != null &&
          Fax.Equals(other.Fax)
        );
    }

    /// <summary>
    ///   To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }

    /// <summary>
    ///   Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class ContactResponse {\n");
      sb.Append("  Name: ").Append(Name).Append("\n");
      sb.Append("  Address: ").Append(Address).Append("\n");
      sb.Append("  WebsiteUrl: ").Append(WebsiteUrl).Append("\n");
      sb.Append("  Email: ").Append(Email).Append("\n");
      sb.Append("  Phone: ").Append(Phone).Append("\n");
      sb.Append("  Fax: ").Append(Fax).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    ///   Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///   Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      return Equals(obj as ContactResponse);
    }

    /// <summary>
    ///   Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      // credit: http://stackoverflow.com/a/263416/677735
      unchecked // Overflow is fine, just wrap
      {
        var hash = 41;
        // Suitable nullity checks etc, of course :)
        if (Name != null)
          hash = hash * 59 + Name.GetHashCode();
        if (Address != null)
          hash = hash * 59 + Address.GetHashCode();
        if (WebsiteUrl != null)
          hash = hash * 59 + WebsiteUrl.GetHashCode();
        if (Email != null)
          hash = hash * 59 + Email.GetHashCode();
        if (Phone != null)
          hash = hash * 59 + Phone.GetHashCode();
        if (Fax != null)
          hash = hash * 59 + Fax.GetHashCode();
        return hash;
      }
    }
  }
}