/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace IO.Swagger.Model
{
  /// <summary>
  ///   DetectInvoiceResponse
  /// </summary>
  [DataContract]
  public class DetectInvoiceResponse : IEquatable<DetectInvoiceResponse>, IValidatableObject
  {
    /// <summary>
    ///   Initializes a new instance of the <see cref="DetectInvoiceResponse" /> class.
    /// </summary>
    /// <param name="DocumentResolution">Resolution of the original document in dpi..</param>
    /// <param name="Language">Resolution of the original document in dpi..</param>
    /// <param name="InvoiceDetailTypePredictions">List of Predictions - One for each predicted invoice detail..</param>
    /// <param name="PredictionGroups">
    ///   List of PredictionGroups - One for each predicted invoice detail&lt;br&gt;e.g. VatGroup,
    ///   containing predictions for Vat Rate, Net Amount and Vat Amount.
    /// </param>
    /// <param name="LineItems">List of predicted line items.</param>
    /// <param name="Sender">The sender of the invoice.</param>
    /// <param name="FormattedResult">Special invoice format. (for future use only).</param>
    /// <param name="IsQualityOk">Invoice quality flag. (for future use only).</param>
    /// <param name="OcrWordQuality">
    ///   Measures ratio of word certainty (certainty vs. uncertainty). The higher the value the
    ///   better.
    /// </param>
    /// <param name="MeanCharacterConfidenceValue">Mean character confidence value. 0 is very confident 100 is very incofident.</param>
    /// <param name="StdDevCharacterConfidenceValue">Standard deviation of character confidence value..</param>
    /// <param name="MaxCharacterConfidenceValue">Max character confidence value. 0 is very confident 100 is very incofident.</param>
    /// <param name="OcrResult">OCR-result as json string.</param>
    /// <param name="ResultPdf">Result pdf-document with marked predictions. (encoded as base64 string).</param>
    /// <param name="InvoiceState">Describes the state of the processed invoice. 0 &#x3D; Ok.</param>
    /// <param name="Measurements">Measurements.</param>
    public DetectInvoiceResponse(int? DocumentResolution = default(int?), string Language = default(string),
      List<DetectionResponse> InvoiceDetailTypePredictions = default(List<DetectionResponse>),
      List<DetectionGroupResponse> PredictionGroups = default(List<DetectionGroupResponse>),
      List<LineItemGroupResponse> LineItems = default(List<LineItemGroupResponse>),
      ContactResponse Sender = default(ContactResponse), string FormattedResult = default(string),
      bool? IsQualityOk = default(bool?), float? OcrWordQuality = default(float?),
      float? MeanCharacterConfidenceValue = default(float?), float? StdDevCharacterConfidenceValue = default(float?),
      int? MaxCharacterConfidenceValue = default(int?), string OcrResult = default(string),
      string ResultPdf = default(string), int? InvoiceState = default(int?),
      DictionaryStringInt64 Measurements = default(DictionaryStringInt64))
    {
      this.DocumentResolution = DocumentResolution;
      this.Language = Language;
      this.InvoiceDetailTypePredictions = InvoiceDetailTypePredictions;
      this.PredictionGroups = PredictionGroups;
      this.LineItems = LineItems;
      this.Sender = Sender;
      this.FormattedResult = FormattedResult;
      this.IsQualityOk = IsQualityOk;
      this.OcrWordQuality = OcrWordQuality;
      this.MeanCharacterConfidenceValue = MeanCharacterConfidenceValue;
      this.StdDevCharacterConfidenceValue = StdDevCharacterConfidenceValue;
      this.MaxCharacterConfidenceValue = MaxCharacterConfidenceValue;
      this.OcrResult = OcrResult;
      this.ResultPdf = ResultPdf;
      this.InvoiceState = InvoiceState;
      this.Measurements = Measurements;
    }

    /// <summary>
    ///   Resolution of the original document in dpi.
    /// </summary>
    /// <value>Resolution of the original document in dpi.</value>
    [DataMember(Name = "DocumentResolution", EmitDefaultValue = false)]
    public int? DocumentResolution { get; set; }

    /// <summary>
    ///   Resolution of the original document in dpi.
    /// </summary>
    /// <value>Resolution of the original document in dpi.</value>
    [DataMember(Name = "Language", EmitDefaultValue = false)]
    public string Language { get; set; }

    /// <summary>
    ///   List of Predictions - One for each predicted invoice detail.
    /// </summary>
    /// <value>List of Predictions - One for each predicted invoice detail.</value>
    [DataMember(Name = "InvoiceDetailTypePredictions", EmitDefaultValue = false)]
    public List<DetectionResponse> InvoiceDetailTypePredictions { get; set; }

    /// <summary>
    ///   List of PredictionGroups - One for each predicted invoice detail&lt;br&gt;e.g. VatGroup, containing predictions for
    ///   Vat Rate, Net Amount and Vat Amount
    /// </summary>
    /// <value>
    ///   List of PredictionGroups - One for each predicted invoice detail&lt;br&gt;e.g. VatGroup, containing predictions
    ///   for Vat Rate, Net Amount and Vat Amount
    /// </value>
    [DataMember(Name = "PredictionGroups", EmitDefaultValue = false)]
    public List<DetectionGroupResponse> PredictionGroups { get; set; }

    /// <summary>
    ///   List of predicted line items
    /// </summary>
    /// <value>List of predicted line items</value>
    [DataMember(Name = "LineItems", EmitDefaultValue = false)]
    public List<LineItemGroupResponse> LineItems { get; set; }

    /// <summary>
    ///   The sender of the invoice
    /// </summary>
    /// <value>The sender of the invoice</value>
    [DataMember(Name = "Sender", EmitDefaultValue = false)]
    public ContactResponse Sender { get; set; }

    /// <summary>
    ///   Special invoice format. (for future use only)
    /// </summary>
    /// <value>Special invoice format. (for future use only)</value>
    [DataMember(Name = "FormattedResult", EmitDefaultValue = false)]
    public string FormattedResult { get; set; }

    /// <summary>
    ///   Invoice quality flag. (for future use only)
    /// </summary>
    /// <value>Invoice quality flag. (for future use only)</value>
    [DataMember(Name = "IsQualityOk", EmitDefaultValue = false)]
    public bool? IsQualityOk { get; set; }

    /// <summary>
    ///   Measures ratio of word certainty (certainty vs. uncertainty). The higher the value the better
    /// </summary>
    /// <value>Measures ratio of word certainty (certainty vs. uncertainty). The higher the value the better</value>
    [DataMember(Name = "OcrWordQuality", EmitDefaultValue = false)]
    public float? OcrWordQuality { get; set; }

    /// <summary>
    ///   Mean character confidence value. 0 is very confident 100 is very incofident
    /// </summary>
    /// <value>Mean character confidence value. 0 is very confident 100 is very incofident</value>
    [DataMember(Name = "MeanCharacterConfidenceValue", EmitDefaultValue = false)]
    public float? MeanCharacterConfidenceValue { get; set; }

    /// <summary>
    ///   Standard deviation of character confidence value.
    /// </summary>
    /// <value>Standard deviation of character confidence value.</value>
    [DataMember(Name = "StdDevCharacterConfidenceValue", EmitDefaultValue = false)]
    public float? StdDevCharacterConfidenceValue { get; set; }

    /// <summary>
    ///   Max character confidence value. 0 is very confident 100 is very incofident
    /// </summary>
    /// <value>Max character confidence value. 0 is very confident 100 is very incofident</value>
    [DataMember(Name = "MaxCharacterConfidenceValue", EmitDefaultValue = false)]
    public int? MaxCharacterConfidenceValue { get; set; }

    /// <summary>
    ///   OCR-result as json string
    /// </summary>
    /// <value>OCR-result as json string</value>
    [DataMember(Name = "OcrResult", EmitDefaultValue = false)]
    public string OcrResult { get; set; }

    /// <summary>
    ///   Result pdf-document with marked predictions. (encoded as base64 string)
    /// </summary>
    /// <value>Result pdf-document with marked predictions. (encoded as base64 string)</value>
    [DataMember(Name = "ResultPdf", EmitDefaultValue = false)]
    public string ResultPdf { get; set; }

    /// <summary>
    ///   Describes the state of the processed invoice. 0 &#x3D; Ok
    /// </summary>
    /// <value>Describes the state of the processed invoice. 0 &#x3D; Ok</value>
    [DataMember(Name = "InvoiceState", EmitDefaultValue = false)]
    public int? InvoiceState { get; set; }

    /// <summary>
    ///   Gets or Sets Measurements
    /// </summary>
    [DataMember(Name = "Measurements", EmitDefaultValue = false)]
    public DictionaryStringInt64 Measurements { get; set; }

    /// <summary>
    ///   Returns true if DetectInvoiceResponse instances are equal
    /// </summary>
    /// <param name="other">Instance of DetectInvoiceResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(DetectInvoiceResponse other)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      if (other == null)
        return false;

      return
        (
          DocumentResolution == other.DocumentResolution ||
          DocumentResolution != null &&
          DocumentResolution.Equals(other.DocumentResolution)
        ) &&
        (
          Language == other.Language ||
          Language != null &&
          Language.Equals(other.Language)
        ) &&
        (
          InvoiceDetailTypePredictions == other.InvoiceDetailTypePredictions ||
          InvoiceDetailTypePredictions != null &&
          InvoiceDetailTypePredictions.SequenceEqual(other.InvoiceDetailTypePredictions)
        ) &&
        (
          PredictionGroups == other.PredictionGroups ||
          PredictionGroups != null &&
          PredictionGroups.SequenceEqual(other.PredictionGroups)
        ) &&
        (
          LineItems == other.LineItems ||
          LineItems != null &&
          LineItems.SequenceEqual(other.LineItems)
        ) &&
        (
          Sender == other.Sender ||
          Sender != null &&
          Sender.Equals(other.Sender)
        ) &&
        (
          FormattedResult == other.FormattedResult ||
          FormattedResult != null &&
          FormattedResult.Equals(other.FormattedResult)
        ) &&
        (
          IsQualityOk == other.IsQualityOk ||
          IsQualityOk != null &&
          IsQualityOk.Equals(other.IsQualityOk)
        ) &&
        (
          OcrWordQuality == other.OcrWordQuality ||
          OcrWordQuality != null &&
          OcrWordQuality.Equals(other.OcrWordQuality)
        ) &&
        (
          MeanCharacterConfidenceValue == other.MeanCharacterConfidenceValue ||
          MeanCharacterConfidenceValue != null &&
          MeanCharacterConfidenceValue.Equals(other.MeanCharacterConfidenceValue)
        ) &&
        (
          StdDevCharacterConfidenceValue == other.StdDevCharacterConfidenceValue ||
          StdDevCharacterConfidenceValue != null &&
          StdDevCharacterConfidenceValue.Equals(other.StdDevCharacterConfidenceValue)
        ) &&
        (
          MaxCharacterConfidenceValue == other.MaxCharacterConfidenceValue ||
          MaxCharacterConfidenceValue != null &&
          MaxCharacterConfidenceValue.Equals(other.MaxCharacterConfidenceValue)
        ) &&
        (
          OcrResult == other.OcrResult ||
          OcrResult != null &&
          OcrResult.Equals(other.OcrResult)
        ) &&
        (
          ResultPdf == other.ResultPdf ||
          ResultPdf != null &&
          ResultPdf.Equals(other.ResultPdf)
        ) &&
        (
          InvoiceState == other.InvoiceState ||
          InvoiceState != null &&
          InvoiceState.Equals(other.InvoiceState)
        ) &&
        (
          Measurements == other.Measurements ||
          Measurements != null &&
          Measurements.Equals(other.Measurements)
        );
    }

    /// <summary>
    ///   To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }

    /// <summary>
    ///   Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class DetectInvoiceResponse {\n");
      sb.Append("  DocumentResolution: ").Append(DocumentResolution).Append("\n");
      sb.Append("  Language: ").Append(Language).Append("\n");
      sb.Append("  InvoiceDetailTypePredictions: ").Append(InvoiceDetailTypePredictions).Append("\n");
      sb.Append("  PredictionGroups: ").Append(PredictionGroups).Append("\n");
      sb.Append("  LineItems: ").Append(LineItems).Append("\n");
      sb.Append("  Sender: ").Append(Sender).Append("\n");
      sb.Append("  FormattedResult: ").Append(FormattedResult).Append("\n");
      sb.Append("  IsQualityOk: ").Append(IsQualityOk).Append("\n");
      sb.Append("  OcrWordQuality: ").Append(OcrWordQuality).Append("\n");
      sb.Append("  MeanCharacterConfidenceValue: ").Append(MeanCharacterConfidenceValue).Append("\n");
      sb.Append("  StdDevCharacterConfidenceValue: ").Append(StdDevCharacterConfidenceValue).Append("\n");
      sb.Append("  MaxCharacterConfidenceValue: ").Append(MaxCharacterConfidenceValue).Append("\n");
      sb.Append("  OcrResult: ").Append(OcrResult).Append("\n");
      sb.Append("  ResultPdf: ").Append(ResultPdf).Append("\n");
      sb.Append("  InvoiceState: ").Append(InvoiceState).Append("\n");
      sb.Append("  Measurements: ").Append(Measurements).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    ///   Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///   Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      return Equals(obj as DetectInvoiceResponse);
    }

    /// <summary>
    ///   Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      // credit: http://stackoverflow.com/a/263416/677735
      unchecked // Overflow is fine, just wrap
      {
        var hash = 41;
        // Suitable nullity checks etc, of course :)
        if (DocumentResolution != null)
          hash = hash * 59 + DocumentResolution.GetHashCode();
        if (Language != null)
          hash = hash * 59 + Language.GetHashCode();
        if (InvoiceDetailTypePredictions != null)
          hash = hash * 59 + InvoiceDetailTypePredictions.GetHashCode();
        if (PredictionGroups != null)
          hash = hash * 59 + PredictionGroups.GetHashCode();
        if (LineItems != null)
          hash = hash * 59 + LineItems.GetHashCode();
        if (Sender != null)
          hash = hash * 59 + Sender.GetHashCode();
        if (FormattedResult != null)
          hash = hash * 59 + FormattedResult.GetHashCode();
        if (IsQualityOk != null)
          hash = hash * 59 + IsQualityOk.GetHashCode();
        if (OcrWordQuality != null)
          hash = hash * 59 + OcrWordQuality.GetHashCode();
        if (MeanCharacterConfidenceValue != null)
          hash = hash * 59 + MeanCharacterConfidenceValue.GetHashCode();
        if (StdDevCharacterConfidenceValue != null)
          hash = hash * 59 + StdDevCharacterConfidenceValue.GetHashCode();
        if (MaxCharacterConfidenceValue != null)
          hash = hash * 59 + MaxCharacterConfidenceValue.GetHashCode();
        if (OcrResult != null)
          hash = hash * 59 + OcrResult.GetHashCode();
        if (ResultPdf != null)
          hash = hash * 59 + ResultPdf.GetHashCode();
        if (InvoiceState != null)
          hash = hash * 59 + InvoiceState.GetHashCode();
        if (Measurements != null)
          hash = hash * 59 + Measurements.GetHashCode();
        return hash;
      }
    }
  }
}