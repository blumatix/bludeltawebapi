/* 
 * BludeltaWebServiceAPI Hosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// DetectInvoiceResponse
    /// </summary>
    [DataContract]
    public partial class DetectInvoiceResponse :  IEquatable<DetectInvoiceResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="DetectInvoiceResponse" /> class.
        /// </summary>
        /// <param name="DocumentResolution">Resolution of the original document in dpi..</param>
        /// <param name="Language">Resolution of the original document in dpi..</param>
        /// <param name="InvoiceDetailTypePredictions">List of Predictions - One for each predicted invoice detail..</param>
        /// <param name="PredictionGroups">List of PredictionGroups - One for each predicted invoice detail&lt;br&gt;e.g. VatGroup, containing predictions for Vat Rate, Net Amount and Vat Amount.</param>
        /// <param name="LineItems">List of predicted line items.</param>
        /// <param name="Sender">The sender of the invoice.</param>
        /// <param name="FormattedResult">Special invoice format. (for future use only).</param>
        /// <param name="IsQualityOk">Invoice quality flag. (for future use only).</param>
        /// <param name="OcrResult">OCR-result as json string.</param>
        /// <param name="ResultPdf">Result pdf-document with marked predictions. (encoded as base64 string).</param>
        /// <param name="InvoiceState">Describes the state of the processed invoice. 0 &#x3D; Ok.</param>
        /// <param name="Measurements">Measurements.</param>
        public DetectInvoiceResponse(int? DocumentResolution = default(int?), string Language = default(string), List<DetectionResponse> InvoiceDetailTypePredictions = default(List<DetectionResponse>), List<DetectionGroupResponse> PredictionGroups = default(List<DetectionGroupResponse>), List<LineItemGroupResponse> LineItems = default(List<LineItemGroupResponse>), ContactResponse Sender = default(ContactResponse), string FormattedResult = default(string), bool? IsQualityOk = default(bool?), string OcrResult = default(string), string ResultPdf = default(string), int? InvoiceState = default(int?), DictionaryStringInt64 Measurements = default(DictionaryStringInt64))
        {
            this.DocumentResolution = DocumentResolution;
            this.Language = Language;
            this.InvoiceDetailTypePredictions = InvoiceDetailTypePredictions;
            this.PredictionGroups = PredictionGroups;
            this.LineItems = LineItems;
            this.Sender = Sender;
            this.FormattedResult = FormattedResult;
            this.IsQualityOk = IsQualityOk;
            this.OcrResult = OcrResult;
            this.ResultPdf = ResultPdf;
            this.InvoiceState = InvoiceState;
            this.Measurements = Measurements;
        }
        
        /// <summary>
        /// Resolution of the original document in dpi.
        /// </summary>
        /// <value>Resolution of the original document in dpi.</value>
        [DataMember(Name="DocumentResolution", EmitDefaultValue=false)]
        public int? DocumentResolution { get; set; }

        /// <summary>
        /// Resolution of the original document in dpi.
        /// </summary>
        /// <value>Resolution of the original document in dpi.</value>
        [DataMember(Name="Language", EmitDefaultValue=false)]
        public string Language { get; set; }

        /// <summary>
        /// List of Predictions - One for each predicted invoice detail.
        /// </summary>
        /// <value>List of Predictions - One for each predicted invoice detail.</value>
        [DataMember(Name="InvoiceDetailTypePredictions", EmitDefaultValue=false)]
        public List<DetectionResponse> InvoiceDetailTypePredictions { get; set; }

        /// <summary>
        /// List of PredictionGroups - One for each predicted invoice detail&lt;br&gt;e.g. VatGroup, containing predictions for Vat Rate, Net Amount and Vat Amount
        /// </summary>
        /// <value>List of PredictionGroups - One for each predicted invoice detail&lt;br&gt;e.g. VatGroup, containing predictions for Vat Rate, Net Amount and Vat Amount</value>
        [DataMember(Name="PredictionGroups", EmitDefaultValue=false)]
        public List<DetectionGroupResponse> PredictionGroups { get; set; }

        /// <summary>
        /// List of predicted line items
        /// </summary>
        /// <value>List of predicted line items</value>
        [DataMember(Name="LineItems", EmitDefaultValue=false)]
        public List<LineItemGroupResponse> LineItems { get; set; }

        /// <summary>
        /// The sender of the invoice
        /// </summary>
        /// <value>The sender of the invoice</value>
        [DataMember(Name="Sender", EmitDefaultValue=false)]
        public ContactResponse Sender { get; set; }

        /// <summary>
        /// Special invoice format. (for future use only)
        /// </summary>
        /// <value>Special invoice format. (for future use only)</value>
        [DataMember(Name="FormattedResult", EmitDefaultValue=false)]
        public string FormattedResult { get; set; }

        /// <summary>
        /// Invoice quality flag. (for future use only)
        /// </summary>
        /// <value>Invoice quality flag. (for future use only)</value>
        [DataMember(Name="IsQualityOk", EmitDefaultValue=false)]
        public bool? IsQualityOk { get; set; }

        /// <summary>
        /// OCR-result as json string
        /// </summary>
        /// <value>OCR-result as json string</value>
        [DataMember(Name="OcrResult", EmitDefaultValue=false)]
        public string OcrResult { get; set; }

        /// <summary>
        /// Result pdf-document with marked predictions. (encoded as base64 string)
        /// </summary>
        /// <value>Result pdf-document with marked predictions. (encoded as base64 string)</value>
        [DataMember(Name="ResultPdf", EmitDefaultValue=false)]
        public string ResultPdf { get; set; }

        /// <summary>
        /// Describes the state of the processed invoice. 0 &#x3D; Ok
        /// </summary>
        /// <value>Describes the state of the processed invoice. 0 &#x3D; Ok</value>
        [DataMember(Name="InvoiceState", EmitDefaultValue=false)]
        public int? InvoiceState { get; set; }

        /// <summary>
        /// Gets or Sets Measurements
        /// </summary>
        [DataMember(Name="Measurements", EmitDefaultValue=false)]
        public DictionaryStringInt64 Measurements { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class DetectInvoiceResponse {\n");
            sb.Append("  DocumentResolution: ").Append(DocumentResolution).Append("\n");
            sb.Append("  Language: ").Append(Language).Append("\n");
            sb.Append("  InvoiceDetailTypePredictions: ").Append(InvoiceDetailTypePredictions).Append("\n");
            sb.Append("  PredictionGroups: ").Append(PredictionGroups).Append("\n");
            sb.Append("  LineItems: ").Append(LineItems).Append("\n");
            sb.Append("  Sender: ").Append(Sender).Append("\n");
            sb.Append("  FormattedResult: ").Append(FormattedResult).Append("\n");
            sb.Append("  IsQualityOk: ").Append(IsQualityOk).Append("\n");
            sb.Append("  OcrResult: ").Append(OcrResult).Append("\n");
            sb.Append("  ResultPdf: ").Append(ResultPdf).Append("\n");
            sb.Append("  InvoiceState: ").Append(InvoiceState).Append("\n");
            sb.Append("  Measurements: ").Append(Measurements).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as DetectInvoiceResponse);
        }

        /// <summary>
        /// Returns true if DetectInvoiceResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of DetectInvoiceResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(DetectInvoiceResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DocumentResolution == other.DocumentResolution ||
                    this.DocumentResolution != null &&
                    this.DocumentResolution.Equals(other.DocumentResolution)
                ) && 
                (
                    this.Language == other.Language ||
                    this.Language != null &&
                    this.Language.Equals(other.Language)
                ) && 
                (
                    this.InvoiceDetailTypePredictions == other.InvoiceDetailTypePredictions ||
                    this.InvoiceDetailTypePredictions != null &&
                    this.InvoiceDetailTypePredictions.SequenceEqual(other.InvoiceDetailTypePredictions)
                ) && 
                (
                    this.PredictionGroups == other.PredictionGroups ||
                    this.PredictionGroups != null &&
                    this.PredictionGroups.SequenceEqual(other.PredictionGroups)
                ) && 
                (
                    this.LineItems == other.LineItems ||
                    this.LineItems != null &&
                    this.LineItems.SequenceEqual(other.LineItems)
                ) && 
                (
                    this.Sender == other.Sender ||
                    this.Sender != null &&
                    this.Sender.Equals(other.Sender)
                ) && 
                (
                    this.FormattedResult == other.FormattedResult ||
                    this.FormattedResult != null &&
                    this.FormattedResult.Equals(other.FormattedResult)
                ) && 
                (
                    this.IsQualityOk == other.IsQualityOk ||
                    this.IsQualityOk != null &&
                    this.IsQualityOk.Equals(other.IsQualityOk)
                ) && 
                (
                    this.OcrResult == other.OcrResult ||
                    this.OcrResult != null &&
                    this.OcrResult.Equals(other.OcrResult)
                ) && 
                (
                    this.ResultPdf == other.ResultPdf ||
                    this.ResultPdf != null &&
                    this.ResultPdf.Equals(other.ResultPdf)
                ) && 
                (
                    this.InvoiceState == other.InvoiceState ||
                    this.InvoiceState != null &&
                    this.InvoiceState.Equals(other.InvoiceState)
                ) && 
                (
                    this.Measurements == other.Measurements ||
                    this.Measurements != null &&
                    this.Measurements.Equals(other.Measurements)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DocumentResolution != null)
                    hash = hash * 59 + this.DocumentResolution.GetHashCode();
                if (this.Language != null)
                    hash = hash * 59 + this.Language.GetHashCode();
                if (this.InvoiceDetailTypePredictions != null)
                    hash = hash * 59 + this.InvoiceDetailTypePredictions.GetHashCode();
                if (this.PredictionGroups != null)
                    hash = hash * 59 + this.PredictionGroups.GetHashCode();
                if (this.LineItems != null)
                    hash = hash * 59 + this.LineItems.GetHashCode();
                if (this.Sender != null)
                    hash = hash * 59 + this.Sender.GetHashCode();
                if (this.FormattedResult != null)
                    hash = hash * 59 + this.FormattedResult.GetHashCode();
                if (this.IsQualityOk != null)
                    hash = hash * 59 + this.IsQualityOk.GetHashCode();
                if (this.OcrResult != null)
                    hash = hash * 59 + this.OcrResult.GetHashCode();
                if (this.ResultPdf != null)
                    hash = hash * 59 + this.ResultPdf.GetHashCode();
                if (this.InvoiceState != null)
                    hash = hash * 59 + this.InvoiceState.GetHashCode();
                if (this.Measurements != null)
                    hash = hash * 59 + this.Measurements.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
