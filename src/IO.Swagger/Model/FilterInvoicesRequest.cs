/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// FilterInvoicesRequest
    /// </summary>
    [DataContract]
    public partial class FilterInvoicesRequest :  IEquatable<FilterInvoicesRequest>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterInvoicesRequest" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected FilterInvoicesRequest() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="FilterInvoicesRequest" /> class.
        /// </summary>
        /// <param name="DocumentState">Comma separate list of invoice states (required).</param>
        /// <param name="SearchText">A text which can be optionally use to restrict invoice search space.</param>
        public FilterInvoicesRequest(string DocumentState = default(string), string SearchText = default(string))
        {
            // to ensure "DocumentState" is required (not null)
            if (DocumentState == null)
            {
                throw new InvalidDataException("DocumentState is a required property for FilterInvoicesRequest and cannot be null");
            }
            else
            {
                this.DocumentState = DocumentState;
            }
            this.SearchText = SearchText;
        }
        
        /// <summary>
        /// Comma separate list of invoice states
        /// </summary>
        /// <value>Comma separate list of invoice states</value>
        [DataMember(Name="DocumentState", EmitDefaultValue=false)]
        public string DocumentState { get; set; }

        /// <summary>
        /// A text which can be optionally use to restrict invoice search space
        /// </summary>
        /// <value>A text which can be optionally use to restrict invoice search space</value>
        [DataMember(Name="SearchText", EmitDefaultValue=false)]
        public string SearchText { get; set; }

        /// <summary>
        /// Specify if response should contain DetectInvocieResponse, default is value is false.
        /// </summary>
        [DataMember(Name = "IncludeDetectInvoiceResponse", EmitDefaultValue = false)]
        public bool IncludeDetectInvoiceResponse { get; set; } = false;

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class FilterInvoicesRequest {\n");
            sb.Append("  DocumentState: ").Append(DocumentState).Append("\n");
            sb.Append("  SearchText: ").Append(SearchText).Append("\n");
            sb.Append("  IncludeDetectInvoiceResonse: ").Append(SearchText).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as FilterInvoicesRequest);
        }

        /// <summary>
        /// Returns true if FilterInvoicesRequest instances are equal
        /// </summary>
        /// <param name="other">Instance of FilterInvoicesRequest to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(FilterInvoicesRequest other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.DocumentState == other.DocumentState ||
                    this.DocumentState != null &&
                    this.DocumentState.Equals(other.DocumentState)
                ) && 
                (
                    this.SearchText == other.SearchText ||
                    this.SearchText != null &&
                    this.SearchText.Equals(other.SearchText)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.DocumentState != null)
                    hash = hash * 59 + this.DocumentState.GetHashCode();
                if (this.SearchText != null)
                    hash = hash * 59 + this.SearchText.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
