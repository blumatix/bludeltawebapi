/* 
 * BludeltaWebServiceAPI Hosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// InvoiceContainersResponse
    /// </summary>
    [DataContract]
    public partial class InvoiceContainersResponse :  IEquatable<InvoiceContainersResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceContainersResponse" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected InvoiceContainersResponse() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="InvoiceContainersResponse" /> class.
        /// </summary>
        /// <param name="State">On success state &#x3D;&#x3D; 0 else state &gt; 0 (required).</param>
        /// <param name="From">From.</param>
        /// <param name="To">To.</param>
        /// <param name="InvoiceContainers">InvoiceContainers.</param>
        public InvoiceContainersResponse(int? State = default(int?), DateTime? From = default(DateTime?), DateTime? To = default(DateTime?), List<InvoiceContainer> InvoiceContainers = default(List<InvoiceContainer>))
        {
            // to ensure "State" is required (not null)
            if (State == null)
            {
                throw new InvalidDataException("State is a required property for InvoiceContainersResponse and cannot be null");
            }
            else
            {
                this.State = State;
            }
            this.From = From;
            this.To = To;
            this.InvoiceContainers = InvoiceContainers;
        }
        
        /// <summary>
        /// On success state &#x3D;&#x3D; 0 else state &gt; 0
        /// </summary>
        /// <value>On success state &#x3D;&#x3D; 0 else state &gt; 0</value>
        [DataMember(Name="State", EmitDefaultValue=false)]
        public int? State { get; set; }

        /// <summary>
        /// Gets or Sets From
        /// </summary>
        [DataMember(Name="From", EmitDefaultValue=false)]
        public DateTime? From { get; set; }

        /// <summary>
        /// Gets or Sets To
        /// </summary>
        [DataMember(Name="To", EmitDefaultValue=false)]
        public DateTime? To { get; set; }

        /// <summary>
        /// Gets or Sets InvoiceContainers
        /// </summary>
        [DataMember(Name="InvoiceContainers", EmitDefaultValue=false)]
        public List<InvoiceContainer> InvoiceContainers { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class InvoiceContainersResponse {\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  From: ").Append(From).Append("\n");
            sb.Append("  To: ").Append(To).Append("\n");
            sb.Append("  InvoiceContainers: ").Append(InvoiceContainers).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            return this.Equals(obj as InvoiceContainersResponse);
        }

        /// <summary>
        /// Returns true if InvoiceContainersResponse instances are equal
        /// </summary>
        /// <param name="other">Instance of InvoiceContainersResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InvoiceContainersResponse other)
        {
            // credit: http://stackoverflow.com/a/10454552/677735
            if (other == null)
                return false;

            return 
                (
                    this.State == other.State ||
                    this.State != null &&
                    this.State.Equals(other.State)
                ) && 
                (
                    this.From == other.From ||
                    this.From != null &&
                    this.From.Equals(other.From)
                ) && 
                (
                    this.To == other.To ||
                    this.To != null &&
                    this.To.Equals(other.To)
                ) && 
                (
                    this.InvoiceContainers == other.InvoiceContainers ||
                    this.InvoiceContainers != null &&
                    this.InvoiceContainers.SequenceEqual(other.InvoiceContainers)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            // credit: http://stackoverflow.com/a/263416/677735
            unchecked // Overflow is fine, just wrap
            {
                int hash = 41;
                // Suitable nullity checks etc, of course :)
                if (this.State != null)
                    hash = hash * 59 + this.State.GetHashCode();
                if (this.From != null)
                    hash = hash * 59 + this.From.GetHashCode();
                if (this.To != null)
                    hash = hash * 59 + this.To.GetHashCode();
                if (this.InvoiceContainers != null)
                    hash = hash * 59 + this.InvoiceContainers.GetHashCode();
                return hash;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
