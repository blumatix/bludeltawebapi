/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace IO.Swagger.Model
{
  /// <summary>
  ///   ImportInvoiceResponse
  /// </summary>
  [DataContract]
  public class ImportInvoiceResponse : IEquatable<ImportInvoiceResponse>, IValidatableObject
  {
    /// <summary>
    ///   Initializes a new instance of the <see cref="ImportInvoiceResponse" /> class.
    /// </summary>
    /// <param name="State">State.</param>
    /// <param name="Message">Message.</param>
    /// <param name="Available">Available.</param>
    /// <param name="InvoiceId">InvoiceId.</param>
    /// <param name="FileName">FileName.</param>
    /// <param name="File">File.</param>
    /// <param name="DetectInvoiceResponse">DetectInvoiceResponse.</param>
    public ImportInvoiceResponse(int? State = default(int?), string Message = default(string),
      bool? Available = default(bool?), string InvoiceId = default(string), string FileName = default(string),
      string File = default(string), DetectInvoiceResponse DetectInvoiceResponse = default(DetectInvoiceResponse))
    {
      this.State = State;
      this.Message = Message;
      this.Available = Available;
      this.InvoiceId = InvoiceId;
      this.FileName = FileName;
      this.File = File;
      this.DetectInvoiceResponse = DetectInvoiceResponse;
    }

    /// <summary>
    ///   Gets or Sets State
    /// </summary>
    [DataMember(Name = "State", EmitDefaultValue = false)]
    public int? State { get; set; }

    /// <summary>
    ///   Gets or Sets Message
    /// </summary>
    [DataMember(Name = "Message", EmitDefaultValue = false)]
    public string Message { get; set; }

    /// <summary>
    ///   Gets or Sets Available
    /// </summary>
    [DataMember(Name = "Available", EmitDefaultValue = false)]
    public bool? Available { get; set; }

    /// <summary>
    ///   Gets or Sets InvoiceId
    /// </summary>
    [DataMember(Name = "InvoiceId", EmitDefaultValue = false)]
    public string InvoiceId { get; set; }

    /// <summary>
    ///   Gets or Sets FileName
    /// </summary>
    [DataMember(Name = "FileName", EmitDefaultValue = false)]
    public string FileName { get; set; }

    /// <summary>
    ///   Gets or Sets File
    /// </summary>
    [DataMember(Name = "File", EmitDefaultValue = false)]
    public string File { get; set; }

    /// <summary>
    ///   Gets or Sets DetectInvoiceResponse
    /// </summary>
    [DataMember(Name = "DetectInvoiceResponse", EmitDefaultValue = false)]
    public DetectInvoiceResponse DetectInvoiceResponse { get; set; }

    /// <summary>
    ///   Returns true if ImportInvoiceResponse instances are equal
    /// </summary>
    /// <param name="other">Instance of ImportInvoiceResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(ImportInvoiceResponse other)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      if (other == null)
        return false;

      return
        (
          State == other.State ||
          State != null &&
          State.Equals(other.State)
        ) &&
        (
          Message == other.Message ||
          Message != null &&
          Message.Equals(other.Message)
        ) &&
        (
          Available == other.Available ||
          Available != null &&
          Available.Equals(other.Available)
        ) &&
        (
          InvoiceId == other.InvoiceId ||
          InvoiceId != null &&
          InvoiceId.Equals(other.InvoiceId)
        ) &&
        (
          FileName == other.FileName ||
          FileName != null &&
          FileName.Equals(other.FileName)
        ) &&
        (
          File == other.File ||
          File != null &&
          File.Equals(other.File)
        ) &&
        (
          DetectInvoiceResponse == other.DetectInvoiceResponse ||
          DetectInvoiceResponse != null &&
          DetectInvoiceResponse.Equals(other.DetectInvoiceResponse)
        );
    }

    /// <summary>
    ///   To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }

    /// <summary>
    ///   Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class ImportInvoiceResponse {\n");
      sb.Append("  State: ").Append(State).Append("\n");
      sb.Append("  Message: ").Append(Message).Append("\n");
      sb.Append("  Available: ").Append(Available).Append("\n");
      sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
      sb.Append("  FileName: ").Append(FileName).Append("\n");
      sb.Append("  File: ").Append(File).Append("\n");
      sb.Append("  DetectInvoiceResponse: ").Append(DetectInvoiceResponse).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    ///   Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///   Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      return Equals(obj as ImportInvoiceResponse);
    }

    /// <summary>
    ///   Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      // credit: http://stackoverflow.com/a/263416/677735
      unchecked // Overflow is fine, just wrap
      {
        var hash = 41;
        // Suitable nullity checks etc, of course :)
        if (State != null)
          hash = hash * 59 + State.GetHashCode();
        if (Message != null)
          hash = hash * 59 + Message.GetHashCode();
        if (Available != null)
          hash = hash * 59 + Available.GetHashCode();
        if (InvoiceId != null)
          hash = hash * 59 + InvoiceId.GetHashCode();
        if (FileName != null)
          hash = hash * 59 + FileName.GetHashCode();
        if (File != null)
          hash = hash * 59 + File.GetHashCode();
        if (DetectInvoiceResponse != null)
          hash = hash * 59 + DetectInvoiceResponse.GetHashCode();
        return hash;
      }
    }
  }
}