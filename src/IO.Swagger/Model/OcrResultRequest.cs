/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace IO.Swagger.Model
{
  /// <summary>
  ///   Retrieve the OCR result of a single page from a certain InvoiceContainer
  /// </summary>
  [DataContract]
  public class OcrResultRequest : IEquatable<OcrResultRequest>, IValidatableObject
  {
    /// <summary>
    ///   Initializes a new instance of the <see cref="OcrResultRequest" /> class.
    /// </summary>
    [JsonConstructor]
    protected OcrResultRequest()
    {
    }

    /// <summary>
    ///   Initializes a new instance of the <see cref="OcrResultRequest" /> class.
    /// </summary>
    /// <param name="ContainerId">ContainerId.</param>
    /// <param name="InvoiceId">InvoiceId.</param>
    /// <param name="PageNo">Requested page number of the invoice. If -1 than all pages will be returned (required).</param>
    public OcrResultRequest(object ContainerId = default(object), object InvoiceId = default(object),
      int? PageNo = default(int?))
    {
      // to ensure "PageNo" is required (not null)
      if (PageNo == null)
        throw new InvalidDataException("PageNo is a required property for OcrResultRequest and cannot be null");
      this.PageNo = PageNo;
      this.ContainerId = ContainerId;
      this.InvoiceId = InvoiceId;
    }

    /// <summary>
    ///   ContainerId
    /// </summary>
    /// <value>ContainerId</value>
    [DataMember(Name = "ContainerId", EmitDefaultValue = false)]
    public object ContainerId { get; set; }

    /// <summary>
    ///   InvoiceId
    /// </summary>
    /// <value>InvoiceId</value>
    [DataMember(Name = "InvoiceId", EmitDefaultValue = false)]
    public object InvoiceId { get; set; }

    /// <summary>
    ///   Requested page number of the invoice. If -1 than all pages will be returned
    /// </summary>
    /// <value>Requested page number of the invoice. If -1 than all pages will be returned</value>
    [DataMember(Name = "PageNo", EmitDefaultValue = false)]
    public int? PageNo { get; set; }

    /// <summary>
    ///   Returns true if OcrResultRequest instances are equal
    /// </summary>
    /// <param name="other">Instance of OcrResultRequest to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(OcrResultRequest other)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      if (other == null)
        return false;

      return
        (
          ContainerId == other.ContainerId ||
          ContainerId != null &&
          ContainerId.Equals(other.ContainerId)
        ) &&
        (
          InvoiceId == other.InvoiceId ||
          InvoiceId != null &&
          InvoiceId.Equals(other.InvoiceId)
        ) &&
        (
          PageNo == other.PageNo ||
          PageNo != null &&
          PageNo.Equals(other.PageNo)
        );
    }

    /// <summary>
    ///   To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }

    /// <summary>
    ///   Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class OcrResultRequest {\n");
      sb.Append("  ContainerId: ").Append(ContainerId).Append("\n");
      sb.Append("  InvoiceId: ").Append(InvoiceId).Append("\n");
      sb.Append("  PageNo: ").Append(PageNo).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    ///   Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///   Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      return Equals(obj as OcrResultRequest);
    }

    /// <summary>
    ///   Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      // credit: http://stackoverflow.com/a/263416/677735
      unchecked // Overflow is fine, just wrap
      {
        var hash = 41;
        // Suitable nullity checks etc, of course :)
        if (ContainerId != null)
          hash = hash * 59 + ContainerId.GetHashCode();
        if (InvoiceId != null)
          hash = hash * 59 + InvoiceId.GetHashCode();
        if (PageNo != null)
          hash = hash * 59 + PageNo.GetHashCode();
        return hash;
      }
    }
  }
}