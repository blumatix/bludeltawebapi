/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace IO.Swagger.Model
{
  /// <summary>
  ///   AccessTokenResponse
  /// </summary>
  [DataContract]
  public class AccessTokenResponse : IEquatable<AccessTokenResponse>, IValidatableObject
  {
    /// <summary>
    ///   Initializes a new instance of the <see cref="AccessTokenResponse" /> class.
    /// </summary>
    /// <param name="State">0 &#x3D; Ok, 1 &#x3D; Failed.</param>
    /// <param name="Message">Error message in case of an error.</param>
    /// <param name="AccessToken">The generated access token. Must be provided as header field &#39;X-AccessToken&#39;.</param>
    public AccessTokenResponse(int? State = default(int?), string Message = default(string),
      string AccessToken = default(string))
    {
      this.State = State;
      this.Message = Message;
      this.AccessToken = AccessToken;
    }

    /// <summary>
    ///   0 &#x3D; Ok, 1 &#x3D; Failed
    /// </summary>
    /// <value>0 &#x3D; Ok, 1 &#x3D; Failed</value>
    [DataMember(Name = "State", EmitDefaultValue = false)]
    public int? State { get; set; }

    /// <summary>
    ///   Error message in case of an error
    /// </summary>
    /// <value>Error message in case of an error</value>
    [DataMember(Name = "Message", EmitDefaultValue = false)]
    public string Message { get; set; }

    /// <summary>
    ///   The generated access token. Must be provided as header field &#39;X-AccessToken&#39;
    /// </summary>
    /// <value>The generated access token. Must be provided as header field &#39;X-AccessToken&#39;</value>
    [DataMember(Name = "AccessToken", EmitDefaultValue = false)]
    public string AccessToken { get; set; }

    /// <summary>
    ///   Returns true if AccessTokenResponse instances are equal
    /// </summary>
    /// <param name="other">Instance of AccessTokenResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(AccessTokenResponse other)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      if (other == null)
        return false;

      return
        (
          State == other.State ||
          State != null &&
          State.Equals(other.State)
        ) &&
        (
          Message == other.Message ||
          Message != null &&
          Message.Equals(other.Message)
        ) &&
        (
          AccessToken == other.AccessToken ||
          AccessToken != null &&
          AccessToken.Equals(other.AccessToken)
        );
    }

    /// <summary>
    ///   To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }

    /// <summary>
    ///   Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class AccessTokenResponse {\n");
      sb.Append("  State: ").Append(State).Append("\n");
      sb.Append("  Message: ").Append(Message).Append("\n");
      sb.Append("  AccessToken: ").Append(AccessToken).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    ///   Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///   Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      return Equals(obj as AccessTokenResponse);
    }

    /// <summary>
    ///   Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      // credit: http://stackoverflow.com/a/263416/677735
      unchecked // Overflow is fine, just wrap
      {
        var hash = 41;
        // Suitable nullity checks etc, of course :)
        if (State != null)
          hash = hash * 59 + State.GetHashCode();
        if (Message != null)
          hash = hash * 59 + Message.GetHashCode();
        if (AccessToken != null)
          hash = hash * 59 + AccessToken.GetHashCode();
        return hash;
      }
    }
  }
}