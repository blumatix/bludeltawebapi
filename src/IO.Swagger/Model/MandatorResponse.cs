/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.IO;
using System.Linq;
using System.Runtime.Serialization;
using System.Text;
using Newtonsoft.Json;

namespace IO.Swagger.Model
{
  /// <summary>
  ///   MandatorResponse
  /// </summary>
  [DataContract]
  public class MandatorResponse : IEquatable<MandatorResponse>, IValidatableObject
  {
    /// <summary>
    ///   Initializes a new instance of the <see cref="MandatorResponse" /> class.
    /// </summary>
    [JsonConstructor]
    protected MandatorResponse()
    {
    }

    /// <summary>
    ///   Initializes a new instance of the <see cref="MandatorResponse" /> class.
    /// </summary>
    /// <param name="State">On success state &#x3D;&#x3D; 0 else state &gt; 0 (required).</param>
    /// <param name="ApiKey">Api key (required).</param>
    /// <param name="ApiIdentifiers">Api identifiers.</param>
    public MandatorResponse(int? State = default(int?), ApiKey ApiKey = default(ApiKey),
      List<ApiIdentifier> ApiIdentifiers = default(List<ApiIdentifier>))
    {
      // to ensure "State" is required (not null)
      if (State == null)
        throw new InvalidDataException("State is a required property for MandatorResponse and cannot be null");
      this.State = State;
      // to ensure "ApiKey" is required (not null)
      if (ApiKey == null)
        throw new InvalidDataException("ApiKey is a required property for MandatorResponse and cannot be null");
      this.ApiKey = ApiKey;
      this.ApiIdentifiers = ApiIdentifiers;
    }

    /// <summary>
    ///   On success state &#x3D;&#x3D; 0 else state &gt; 0
    /// </summary>
    /// <value>On success state &#x3D;&#x3D; 0 else state &gt; 0</value>
    [DataMember(Name = "State", EmitDefaultValue = false)]
    public int? State { get; set; }

    /// <summary>
    ///   Api key
    /// </summary>
    /// <value>Api key</value>
    [DataMember(Name = "ApiKey", EmitDefaultValue = false)]
    public ApiKey ApiKey { get; set; }

    /// <summary>
    ///   Api identifiers
    /// </summary>
    /// <value>Api identifiers</value>
    [DataMember(Name = "ApiIdentifiers", EmitDefaultValue = false)]
    public List<ApiIdentifier> ApiIdentifiers { get; set; }

    /// <summary>
    ///   Returns true if MandatorResponse instances are equal
    /// </summary>
    /// <param name="other">Instance of MandatorResponse to be compared</param>
    /// <returns>Boolean</returns>
    public bool Equals(MandatorResponse other)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      if (other == null)
        return false;

      return
        (
          State == other.State ||
          State != null &&
          State.Equals(other.State)
        ) &&
        (
          ApiKey == other.ApiKey ||
          ApiKey != null &&
          ApiKey.Equals(other.ApiKey)
        ) &&
        (
          ApiIdentifiers == other.ApiIdentifiers ||
          ApiIdentifiers != null &&
          ApiIdentifiers.SequenceEqual(other.ApiIdentifiers)
        );
    }

    /// <summary>
    ///   To validate all properties of the instance
    /// </summary>
    /// <param name="validationContext">Validation context</param>
    /// <returns>Validation Result</returns>
    IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
    {
      yield break;
    }

    /// <summary>
    ///   Returns the string presentation of the object
    /// </summary>
    /// <returns>String presentation of the object</returns>
    public override string ToString()
    {
      var sb = new StringBuilder();
      sb.Append("class MandatorResponse {\n");
      sb.Append("  State: ").Append(State).Append("\n");
      sb.Append("  ApiKey: ").Append(ApiKey).Append("\n");
      sb.Append("  ApiIdentifiers: ").Append(ApiIdentifiers).Append("\n");
      sb.Append("}\n");
      return sb.ToString();
    }

    /// <summary>
    ///   Returns the JSON string presentation of the object
    /// </summary>
    /// <returns>JSON string presentation of the object</returns>
    public string ToJson()
    {
      return JsonConvert.SerializeObject(this, Formatting.Indented);
    }

    /// <summary>
    ///   Returns true if objects are equal
    /// </summary>
    /// <param name="obj">Object to be compared</param>
    /// <returns>Boolean</returns>
    public override bool Equals(object obj)
    {
      // credit: http://stackoverflow.com/a/10454552/677735
      return Equals(obj as MandatorResponse);
    }

    /// <summary>
    ///   Gets the hash code
    /// </summary>
    /// <returns>Hash code</returns>
    public override int GetHashCode()
    {
      // credit: http://stackoverflow.com/a/263416/677735
      unchecked // Overflow is fine, just wrap
      {
        var hash = 41;
        // Suitable nullity checks etc, of course :)
        if (State != null)
          hash = hash * 59 + State.GetHashCode();
        if (ApiKey != null)
          hash = hash * 59 + ApiKey.GetHashCode();
        if (ApiIdentifiers != null)
          hash = hash * 59 + ApiIdentifiers.GetHashCode();
        return hash;
      }
    }
  }
}