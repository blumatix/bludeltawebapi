/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class CountInvoiceApi : ApiBase
    {

        /// <summary>
        /// Initializes a new instance of the <see cref="CountInvoiceApi"/> class.
        /// </summary>
        /// <returns></returns>
        public CountInvoiceApi()
        {}

        /// <summary>
        /// Initializes a new instance of the <see cref="CountInvoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public CountInvoiceApi(Configuration configuration) : base(configuration)
        {}

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>CountedInvoicesResponse</returns>
        public CountedInvoicesResponse CountInvoicesRequestinvoicesStateGet (CountInvoicesRequest request)
        {
             ApiResponse<CountedInvoicesResponse> localVarResponse = CountInvoicesRequestinvoicesStateGetWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="request">CountInvoiceRequest which contains invoice states that shall be taken into account</param>
        /// <returns>ApiResponse of CountedInvoicesResponse</returns>
        public ApiResponse< CountedInvoicesResponse > CountInvoicesRequestinvoicesStateGetWithHttpInfo (CountInvoicesRequest request)
        {
            var localVarPath = "/count/invoices/{State}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            string[] localVarHttpContentTypes = {"application/json"};
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = {"application/json"};
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            localVarPathParams.Add("State", Configuration.ApiClient.ParameterToString(request.State)); // path parameter


            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                var exception = ExceptionFactory("CountInvoicesRequestinvoicesStateGet", localVarResponse);

                if (exception != null) throw exception;
            }

            return new ApiResponse<CountedInvoicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountedInvoicesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountedInvoicesResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of CountedInvoicesResponse</returns>
        public async System.Threading.Tasks.Task<CountedInvoicesResponse> CountInvoicesRequestinvoicesStateGetAsync (CountInvoicesRequest request)
        {
             var localVarResponse = await CountInvoicesRequestinvoicesStateGetAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>Task of ApiResponse (CountedInvoicesResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<CountedInvoicesResponse>> CountInvoicesRequestinvoicesStateGetAsyncWithHttpInfo (CountInvoicesRequest request)
        {
            var localVarPath = "/count/invoices/{State}";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[] {"application/json"};
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            var localVarHttpHeaderAccepts = new[] {"application/json"};
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            localVarPathParams.Add("State", Configuration.ApiClient.ParameterToString(request.State)); // path parameter

            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, null, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            var localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("CountInvoicesRequestinvoicesStateGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<CountedInvoicesResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (CountedInvoicesResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(CountedInvoicesResponse)));
        }

    }
}
