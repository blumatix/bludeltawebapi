/* 
 * BludeltaWebServiceAPI Selfhosted
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using RestSharp;
using IO.Swagger.Client;
using IO.Swagger.Model;

namespace IO.Swagger.Api
{
    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IFilterApi : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="documentState">Comma separate list of invoice states</param>
        /// <param name="searchText">A text which can be optionally use to restrict invoice search space (optional)</param>
        /// <returns>StandardInvoiceContainerResponse</returns>
        StandardInvoiceContainerResponse FilterInvoicesRequestinvoicesGet (string accept, string documentState, string searchText = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="documentState">Comma separate list of invoice states</param>
        /// <param name="searchText">A text which can be optionally use to restrict invoice search space (optional)</param>
        /// <returns>ApiResponse of StandardInvoiceContainerResponse</returns>
        ApiResponse<StandardInvoiceContainerResponse> FilterInvoicesRequestinvoicesGetWithHttpInfo (string accept, string documentState, string searchText = null);
        #endregion Synchronous Operations
        #region Asynchronous Operations
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="documentState">Comma separate list of invoice states</param>
        /// <param name="searchText">A text which can be optionally use to restrict invoice search space (optional)</param>
        /// <returns>Task of StandardInvoiceContainerResponse</returns>
        System.Threading.Tasks.Task<StandardInvoiceContainerResponse> FilterInvoicesRequestinvoicesGetAsync (string accept, string documentState, string searchText = null);

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="accept">Accept Header</param>
        /// <param name="documentState">Comma separate list of invoice states</param>
        /// <param name="searchText">A text which can be optionally use to restrict invoice search space (optional)</param>
        /// <returns>Task of ApiResponse (StandardInvoiceContainerResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<StandardInvoiceContainerResponse>> FilterInvoicesRequestinvoicesGetAsyncWithHttpInfo (string accept, string documentState, string searchText = null);
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public class FilterInvoiceApi : ApiBase
    {
        public FilterInvoiceApi()
        {}

        /// <summary>
        /// Initializes a new instance of the <see cref="FilterInvoiceApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public FilterInvoiceApi(Configuration configuration) : base(configuration)
        {}

        /// <summary>
        ///  
        /// </summary>
        /// <exception>Thrown when fails to make API call <cref>IO.Swagger.Client.ApiException</cref> </exception>
        /// <returns>StandardInvoiceContainerResponse</returns>
        public StandardInvoiceContainerResponse FilterInvoicesRequestinvoicesGet (FilterInvoicesRequest request)
        {
             var localVarResponse = FilterInvoicesRequestinvoicesGetWithHttpInfo(request);
             return localVarResponse.Data;
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception cref="IO.Swagger.Client.ApiException">Thrown when fails to make API call</exception>
        /// <returns>ApiResponse of StandardInvoiceContainerResponse</returns>
        public ApiResponse< StandardInvoiceContainerResponse > FilterInvoicesRequestinvoicesGetWithHttpInfo (FilterInvoicesRequest request)
        {
            var localVarPath = "/filter/invoices/";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            Object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new string[] {"application/json"};
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = {"application/json"};
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
            {
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);
            }

            SetParameters(request, localVarQueryParams);

            // make the HTTP request
            var localVarResponse = (IRestResponse) Configuration.ApiClient.CallApi(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterInvoicesRequestinvoicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardInvoiceContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardInvoiceContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardInvoiceContainerResponse)));
        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception>Thrown when fails to make API call <cref>IO.Swagger.Client.ApiException</cref></exception>
        /// <returns>Task of StandardInvoiceContainerResponse</returns>
        public async System.Threading.Tasks.Task<StandardInvoiceContainerResponse> FilterInvoicesRequestinvoicesGetAsync (FilterInvoicesRequest request)
        {
             var localVarResponse = await FilterInvoicesRequestinvoicesGetAsyncWithHttpInfo(request);
             return localVarResponse.Data;

        }

        /// <summary>
        ///  
        /// </summary>
        /// <exception>Thrown when fails to make API call <cref>IO.Swagger.Client.ApiException</cref></exception>
        /// <returns>Task of ApiResponse (StandardInvoiceContainerResponse)</returns>
        public async System.Threading.Tasks.Task<ApiResponse<StandardInvoiceContainerResponse>> FilterInvoicesRequestinvoicesGetAsyncWithHttpInfo (FilterInvoicesRequest request)
        {
            var localVarPath = "/filter/invoices/";
            var localVarPathParams = new Dictionary<string, string>();
            var localVarQueryParams = new Dictionary<string, string>();
            var localVarHeaderParams = new Dictionary<string, string>(Configuration.DefaultHeader);
            var localVarFormParams = new Dictionary<string, string>();
            var localVarFileParams = new Dictionary<string, FileParameter>();

            Object localVarPostBody = null;

            // to determine the Content-Type header
            var localVarHttpContentTypes = new[] {"application/json"};
            var localVarHttpContentType = Configuration.ApiClient.SelectHeaderContentType(localVarHttpContentTypes);

            // to determine the Accept header
            string[] localVarHttpHeaderAccepts = {"application/json"};
            var localVarHttpHeaderAccept = Configuration.ApiClient.SelectHeaderAccept(localVarHttpHeaderAccepts);

            if (localVarHttpHeaderAccept != null)
                localVarHeaderParams.Add("Accept", localVarHttpHeaderAccept);

            SetParameters(request, localVarQueryParams);


            // make the HTTP request
            var localVarResponse = (IRestResponse) await Configuration.ApiClient.CallApiAsync(localVarPath,
                Method.GET, localVarQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarFileParams,
                localVarPathParams, localVarHttpContentType);

            int localVarStatusCode = (int) localVarResponse.StatusCode;

            if (ExceptionFactory != null)
            {
                Exception exception = ExceptionFactory("FilterInvoicesRequestinvoicesGet", localVarResponse);
                if (exception != null) throw exception;
            }

            return new ApiResponse<StandardInvoiceContainerResponse>(localVarStatusCode,
                localVarResponse.Headers.ToDictionary(x => x.Name, x => x.Value.ToString()),
                (StandardInvoiceContainerResponse) Configuration.ApiClient.Deserialize(localVarResponse, typeof(StandardInvoiceContainerResponse)));
        }

        private void SetParameters(FilterInvoicesRequest request, Dictionary<string, string> localVarQueryParams)
        {
            if (request.DocumentState != null)
            {
                localVarQueryParams.Add("DocumentState", Configuration.ApiClient.ParameterToString(request.DocumentState)); 
            }

            if (request.SearchText != null)
            {
                localVarQueryParams.Add("SearchText", Configuration.ApiClient.ParameterToString(request.SearchText)); 
            }

            localVarQueryParams.Add("IncludeDetectInvoiceResponse", Configuration.ApiClient.ParameterToString(request.IncludeDetectInvoiceResponse));
        }
    }
}
